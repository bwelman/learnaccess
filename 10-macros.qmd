# Macros {#sec-macros}

::: callout
**OBJECTIVES**

-   Understand what macros can do.
-   Learn how to create macros.
-   Learn how to connect macros to a form.
:::

## About Creating Macros {#sec-macros-about}

A **macro** is a small program that performs automated tasks. For example, a macro can open a form or search for a record. Macros are often linked to controls such as command buttons. When you click the button, the macro executes its list of commands.

In Access, a macro consists of a sequence of actions. Many actions require additional arguments to specify how they should be performed.

![Macro editor with action catalog shown on the right.](images/common/macro-window.png){#fig-macro-window-1}

You don't need any programming experience to create a macro. Each macro is saved as an object within the database.

::: callout-caution
**Security note:**

Access classifies macro actions into two types:

-   **Safe actions** that are always allowed\
-   **Potentially unsafe actions**, such as [Print]{.uicontrol}, which could send unwanted jobs to the printer

By default, Access only shows safe actions. To view all actions, including potentially unsafe ones, enable [Show All Actions (tab Design \> group Show/Hide)]{.uicontrol} in the macro window.
:::

## Customer Search by Code {#sec-macros-customercode}

**Goal**

Add a list box to a form to search for a customer by their customer code. When a code is selected, the form displays the matching record.

**Analysis**

Start with a standard form. Add a [Combo Box]{.uicontrol} that lists customer codes. Then create a macro with two actions:

1.  Move focus to the customer code field\
2.  Search for the matching record

::: {#prp-macros-customercode}
[File]{.smallcaps}: `{{< var database >}}`

1.  Open the database.

2.  Select the [Customers]{.varname} table (do not open it).

3.  Go to [Create \> Form (Forms group)]{.uicontrol}. A form is created and opened in [Layout View]{.uicontrol}.

4.  Save the form as [Search customer by code]{.varname}, using the button ![Save](images/common/button-save.png) on the [Quick Access toolbar]{.uicontrol}.

5.  Switch to [Design View]{.uicontrol}.

6.  Go to [Design \> Combo Box (group Controls)]{.uicontrol} and draw a combo box, ![](images/common/combobox.png), in the right section of the form header.

![Form with newly added combo box placeholder.](images/macros/customercode-combobox-framework.png){#fig-customercode-combobox-framework}

After drawing the framework, the Combo Box Wizard is automatically started.

7.  The Combo Box Wizard will open automatically. Answer the prompts as follows:

    -   The combo box should get values from a table or query.
    -   Choose the [Customers]{.varname} table.
    -   Include only the [CustomerCode]{.varname} field.
    -   Sort ascending by [CustomerCode]{.varname}.
    -   Accept the default column width.
    -   Store the selected value for later use.
    -   Label: "Search by customer code:".

    After completing the wizard you are back in the Design View.

8.  If the label overlaps the combo box, reposition them by dragging the top-left handle of the controls.

9.  Close and save the form.

10. Go to [tab Create \> Macro (Macros & Code group)]{.uicontrol}.

![Macro window ready for defining actions.](images/common/macro-window.png){#fig-macro-window-2}

10. In the [Add New Action]{.uicontrol} dropdown, choose [GoToControl]{.uicontrol}. In the [Control Name]{.uicontrol} field, enter `CustomerCode`.

![First macro action: GoToControl targeting CustomerCode field.](images/macros/macro-customercode-gotocontrol.png){#fig-macro-customercode-gotocontrol-1}

11. Add another action: [FindRecord]{.uicontrol}. Set [Find What]{.uicontrol} to `=[searchcode]`. Leave the other fields at their default values.

![Complete macro to search customer by code.](images/macros/macro-customer-by-code.png){#fig-macro-customer-by-code}

12. Close and save the macro as [Search customer by code]{.varname}.

13. Reopen the form [Search customer by code]{.varname} in [Design View]{.uicontrol}.

14. Select the combo box and set its [Name]{.uicontrol} property (tab Other) to `searchcode`.

![Setting the Name property of the combo box to ‘searchcode’.](images/macros/customercode-combobox-name.png){#fig-customercode-combobox-name}

15. While the combo box is still selected, go to the \[Event\] tab in the Property Sheet. For [After Update]{.uicontrol}, select the macro [Search customer by code]{.varname}.

![Assigning macro to the combo box’s After Update event.](images/macros/customercode-combobox-afterupdate.png){#fig-customercode-combobox-afterupdate}

16. Save and close the form.

17. Open the form and test the combo box functionality.
:::

## Customer Search by Name {#sec-macros-customername}

**Goal**

This task builds on the previous one, @prp-macros-customercode. You’ll add a second combo box that lets you find customers by name (last name followed by first name).

**Analysis**

Start by copying the form [Search customer by code]{.varname}. Add a second [Combo Box]{.uicontrol} that displays a sorted list of full names. Then create a macro to search the correct record and synchronize the two boxes.

:::::: {#prp-macros-customername}
[File]{.smallcaps}: `{{< var database >}}`

1.  Open the database.

2.  Right-click the [Search customer by code]{.varname} form, choose [Copy]{.uicontrol}, then right-click again and choose [Paste]{.uicontrol}.

3.  Name the new form [Search customer by name]{.varname}, and open it in [Design View]{.uicontrol}.

4.  Drag the top edge of the \[Detail\] section downward to make space in the header.

![Expanding the form header to make room for an additional combo box.](images/macros/customername-formheader.png){#fig-customername-formheader}

5.  Add a second [Combo Box]{.uicontrol} below the first one. In the Combo Box Wizard:

    -   Get values from a table or query.
    -   Choose the [Customers]{.varname} table.
    -   Add fields in this order: \[LastName\], \[FirstName\], \[CustomerCode\]\
    -   Sort by last name, then first name (ascending).
    -   Accept default width and hide the key column ([CustomerCode]{.varname}).
    -   Store the value for later use.
    -   Label: "Search by customer name:".

    After completing the wizard you are back in the [Design View]{.uicontrol}.

6.  Align the labels and combo boxes neatly.

![Form layout with two combo boxes: one for code, one for name.](images/macros/customername-comboboxes.png){#fig-customername-comboboxes}

7.  Select the second combo box. In the Property Sheet (tab Other), set [Name]{.uicontrol} to [searchname]{.varname}. In the [After Update]{.uicontrol} event (tab Event), enter [Search customer by name]{.varname}.

::: callout-note
The macro does not exist yet, you'll create it in the next step.
:::

8.  Save and close the form.

9.  Go to [tab Create \> Macro (Macros & Code group)]{.uicontrol}.

![Creating a new macro to handle name-based search.](images/common/macro-window.png){#fig-macro-window}

10. Add the action [GoToControl]{.uicontrol}, and set [Control Name]{.uicontrol} to [CustomerCode]{.varname}.

![Macro step: GoToControl set to the CustomerCode field.](images/macros/macro-customercode-gotocontrol.png){#fig-macro-customercode-gotocontrol-2}

11. Add the action [FindRecord]{.uicontrol}, and set [Find What]{.uicontrol} to `=[searchname]`.

::: callout-note
To keep both combo boxes synchronized, you’ll need to use [SetValue]{.uicontrol} to update the first combo box when the second is used.
:::

12. Enable [Show All Actions]{.uicontrol} in the macro design window to access [SetValue]{.uicontrol}.

13. Add the [SetValue]{.uicontrol} action with the following parameters:

    -   Item: `[Form]![Search customer by name]![searchcode]`
    -   Expression: `[Form]![Search customer by name]![CustomerCode]`

![Macro with SetValue to synchronize both combo boxes.](images/macros/macro-customer-by-name.png){#fig-macro-customer-by-name}

14. Save the macro as [Search customer by name]{.varname} and close the macro window.

15. Open the form [Search customer by name]{.varname} and test both combo boxes.

::: callout-note
If you want the first combo box to update when the second is used, you'll need to add a similar [SetValue]{.uicontrol} action to the other macro as well. However, doing so may affect the original form [Search customer by code]{.varname}.
:::
::::::

## Combo Box: Search by Box Code {#sec-macros-boxcode}

**Goal**

This task is similar to searching by customer code. You’ll create a form that displays box details and includes a combo box to search by [BoxCode]{.varname}.

**Analysis**

Start with a standard form. Add a [Combo Box]{.uicontrol}, and create a macro that:

1.  Moves focus to the [BoxCode]{.varname} field.
2.  Searches for the selected record.

::: {#prp-macros-boxcode}
[File]{.smallcaps}: `{{< var database >}}`

1.  Create a new form with a combo box, and name it [Search box by code]{.varname}.

2.  Create a macro named [Search box by code]{.varname} that performs the lookup.

3.  Open the form and test that the combo box finds and displays the correct record.
:::
