# Data Entry and Modification {#sec-data}

::: callout
**OBJECTIVES**

-   Using a data entry form.
-   Editing, adding and deleting records in a table.
-   Using a main form with a subform.
-   Understanding options to enforce data entry validation.
:::

Adding new data or changing existing data is one of the primary activities within Access. In this chapter, you will learn some basic skills for adding and/or modifying data.

## About Data Entry {#sec-data-about}

Records can be edited directly in a table, but this is not recommended for individuals unfamiliar with Access. Incorrect entries can easily be made, especially in tables related to other tables. The recommended method is to perform data entry through a form. Forms can be made user-friendly, provide explanatory text, and perform data validation in the background.

## Table Operations {#sec-data-tables}

You can perform the most important data operations directly in the table, such as editing, adding, and deleting records. You can type directly into fields; standard copy and paste methods are also supported.

#### Editing Records {.unnumbered}

Open the table, then use the mouse or arrow keys to navigate to the field you want to change. Click in the field and make the necessary changes. Once you make a change, a pencil icon will appear on the left side of the record, ![](images/common/icon-edit.png). This indicates that the record is in **edit mode**. Once you leave the record, the icon disappears, and the changes are saved.

#### Adding Records {.unnumbered}

Navigate to the bottom of the table, to the row marked with an asterisk: ![](images/common/asterisk.png). This row doesn't actually exist until you begin entering data, at which point it is created, and the asterisk moves down one row. The new record is saved automatically.

#### Deleting Records {.unnumbered}

There are several ways to delete records. The two easiest methods are:

-   Select the record, then press the [Delete]{.uicontrol} key.
-   Right-click in the margin at the beginning of the record, then choose [Delete Record]{.uicontrol}. Access will ask for confirmation before deleting.

::: callout-warning
Access does not have a button or function to undo deletions.
:::

## Add a New Customer {#sec-data-new-customer}

The [Registration]{.varname} form is designed exclusively for adding new records to the [Customers]{.varname} table. Browse existing records is disabled in this form.

::::: {#prp-data-new-customer}
[File]{.smallcaps}: `{{< var database >}}`

1.  Open the database.

2.  Open the [Registration]{.varname} form.

::: callout-note
The [Registration]{.varname} form contains blank fields for data entry. The insertion point indicates where the typed text will appear. You can move the insertion point by clicking on another field or by repeatedly pressing the TAB key.
:::

3.  Enter the data as shown in @fig-form-registration.

![Data entry with form Registration.](images/data/form-registration.png){#fig-form-registration}

::: callout-note
You will see the pencil icon again, indicating that the form is in edit mode and the data has not yet been saved.

The record is automatically saved when you close the form or navigate to another record.
:::

4.  Close the form using the close button [X]{.uicontrol} in the upper right corner of the document window. The records added through the [Registration]{.varname} form are stored in the [Customers]{.varname} table.

5.  Open the [Customers]{.varname} table, navigate to the last record, and verify that this is the record you just added.

6.  Close the [Customers]{.varname} table.
:::::

## Add a New Praline {#sec-data-new-praline}

The [Pralines]{.varname} form allows you to browse existing records and add new ones.

::: {#prp-data-new-praline}
[File]{.smallcaps}: `{{< var database >}}`

1.  Open the database.

2.  Open the [Pralines]{.varname} form.

3.  In the status bar, click the New (blank) record button.

4.  Enter the following data:

    -   PralineName: Pecan Mocha Toffee
    -   PralineCode: F03
    -   PralineDescription: Sweat creamy mocha and pecan, surrounded with toffee
    -   ChocolateType: Toffee
    -   FillingType: Mocha cream
    -   NutType: Pecan
    -   PralineCosts: 0.25

5.  Close the [Pralines]{.varname} form. The records added through the [Pralines]{.varname} form are stored in the [Pralines]{.varname} table.

6.  Open the [Pralines]{.varname} table and ensure the record has been added.

7.  Close the [Pralines]{.varname} table.
:::

## Add a New Box {#sec-data-new-box}

You can add a new box using the [Boxes]{.varname} form. This form differs from the previous two because it includes another form within it. This structure is known as a main form with a subform.

Main Form ([Boxes]{.varname})

:   This form contains data about the box itself (not its contents), such as [BoxName]{.varname}, [BoxCode]{.varname}, [BoxDescription]{.varname}, [Weight]{.varname}, [BoxPrice]{.varname}, and [Stock]{.varname}. This data is stored in the [Boxes]{.varname} table.

Subform ([Boxes subform]{.varname})

:   This form contains data about the pralines in the box, such as [PralineCode]{.varname} and [Quantity]{.varname}. This data is stored in the [BoxDetails]{.varname} table.

::: callout-note
The content of the [BoxCosts]{.varname} field is calculated by summing `PralineCosts * Quantity` for all pralines in the box. Because this value can be calculated, it is not stored in a table
:::

::: {#prp-data-new-box}
[File]{.smallcaps}: `{{< var database >}}`

1.  Open the database.

2.  Open the [Boxes]{.varname} form.

3.  In the status bar, click the New (blank) record button ![](images/common/button-record-new.png).

4.  Enter the following data:

    -   BoxName: Winter Surprise
    -   BoxCode: WINT
    -   BoxDescription: Nuts and berries, covered with chocolate and toffee, ideal for long winter evenings by the fire.
    -   Weight: 300 gram

5.  Below "Content," in the [Code]{.varname} field, click the selection arrow and select PralineCode B02 Butterscotch Blueberry. The remaining praline data, such as PralineName, ChocolateType, NutType, FillingType, and PralineCosts, will be filled in automatically. You only need to enter the data for Quantity (Nr.).

6.  Enter 3 for [Nr.]{.varname}.

7.  Add the following pralines to the box:

    | Code | PralineName            | Nr. |
    |:-----|:-----------------------|:----|
    | B05  | Butterscotch Raspberry | 3   |
    | P03  | Cashew Perfect         | 3   |
    | F01  | Walnut Mocha Toffee    | 3   |
    | F02  | Pistachio Mocha Toffee | 3   |
    | P07  | Classic Cherry         | 3   |

    The BoxCosts of \$4.53 is automatically calculated.

8.  Enter 25.00 for [BoxPrice]{.varname} and 120 for [Stock]{.varname}.

9.  Close the [Boxes]{.varname} form.

10. Check the [Boxes]{.varname} table to ensure the new box has been added.
:::

## Data Restriction and Validation {#sec-data-restriction-validation}

Access offers various options to control how data is entered into the database. For example, you can limit the data that can be entered in a field by defining a validation rule for that field. If the entered data does not satisfy the rule, an error message will inform you of the permitted input. Another method for controlling data input is using an input mask, which defines a format for data entry in a field using characters and symbols.

You can apply these simple validation and restriction methods by setting properties for fields in tables or properties for controls on forms.

It is recommended to define data validation and restriction in the table design by setting field properties. This saves time because every time you use the field in a form, the field validation rules and other properties are also applied to the form.

If the data entered through a form control is not dependent on a table field, then you need to define properties on the form for validating and restricting data.

:::: {#prp-data-restriction}
[File]{.smallcaps}: `{{< var database >}}`

A memo from Snoopy's marketing department states that the price of the Butterscotch box should be changed to \$7.75.

1.  Open the database.

2.  Open the [Boxes]{.varname} form and navigate to the Butterscotch box.

3.  Change [BoxPrice]{.varname} from \$27.75 in \$7.75 and press the TAB key. A validation message appears stating that this price is not right and how you can fix it.

    `Box price too low, should be minimal 2*BoxCosts. Contact marketing department for further information.`

::: callout-note
This message appears because a validation rule is associated with the [BoxPrice]{.varname} field.
:::

4.  Click [OK]{.uicontrol}.

5.  Change the price back in \$27.75 and press the TAB key. Then, close the form.
::::

## Exercises {#sec-data-exercises}

::: {#exr-data001}
**Adding Pralines (data001)**

Add the following pralines:

| Field | Praline 1 | Praline 2 |
|:-----------------|:--------------------------|:--------------------------|
| PralineName | Cashew Mocha Toffee | Almond Mocha Toffee |
| PralineCode | F04 | F05 |
| Description | Sweet creamy mocha and cashew surrounded with toffee. | Sweet creamy mocha and almond surrounded with toffee. |
| ChocolateType | Toffee | Toffee |
| FillingType | Mocha cream | Mocha cream |
| NutType | Cashew | Almond |
| Costs | \$ 0.24 | \$ 0.19 |
:::


::: {#exr-data002}
**Add New Order (data002)**

A customer places a new order with the data below. First, determine the best way to enter the order. Then, create this order. The OrderCode should be the next available order code.

`Order placed on April 23, 2010, at 10:00 AM. Customer Rebecca Smit orders by phone: 3 boxes of CHER and 2 boxes of Marz.`

A few hours later, the following change to this order is made by phone. Again, first, consider the best way to handle the change. Then, apply the change.

`Order change on April 23, 2010, at 4:00 PM. The two boxes of Marz should be deleted.`
:::
