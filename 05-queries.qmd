# Queries {#sec-queries}

```{r, file = "R/webex.R", include = FALSE}
```

::: callout
**OBJECTIVES**

-   Understand the types of queries and their uses.
-   Create a simple select query using the wizard.
-   Apply conditions in a query.
-   Use grouping and perform calculations.
-   Work with parameter queries, update queries, make-table queries, and crosstab queries.
:::

Retrieving information from a database is one of the most common tasks for end users. Queries are essential for this. While end users can create simple queries, complex ones may require assistance from professionals.

## About Creating Queries {#sec-queries-about}

The most common query type is the **select query**, which retrieves specific data from the database. Queries can also perform calculations (such as sums or averages) and come in varioustypes:

Select query

:   Retrieves data from one or more tables and displays the results. It can also perform calculations (e.g., sum, average, count). This is the most widely used query type.

Parameter query

:   Prompts the user to enter one or more values before running. For example, it can show all orders placed on a specific date.

Update query

:   Modifies data in one or more fields for records that meet certain conditions, e.g., applying a 10% price increase to specific products.

Before creating a query, clearly define your information requirements.

## Customers and Orders {#sec-queries-customername-ordercodes}

**GOAL**: Create a sorted list of all customers showing their last name, first name, and order codes.

**ANALYSIS**: Customer names are in the [Customers]{.varname} table. Order codes are in the [Orders]{.varname} table. The Query Wizard is suitable for this straightforward task.

::: {#prp-queries-customername-ordercodes}
[File]{.smallcaps}: `{{< var database >}}`

1.  Open the database.

2.  Go to [tab Create \> Query Wizard (group Queries)]{.uicontrol}. The New Query dialog box opens.

3.  Select [Simple Query Wizard]{.uicontrol}, then click [OK]{.uicontrol}.

4.  Under [Tables/Queries]{.uicontrol}, select [Table: Customers]{.varname}.

![Simple Query Wizard: Selecting the Customers table.](images/queries/q-wizard-t-customers.png){#fig-q-wizard-t-customers}

5.  Add fields [LastName]{.varname} and [FirstName]{.varname}.

6.  Switch to [Table: Orders]{.varname} and add [OrderCode]{.varname}.

![Selected fields from Customers and Orders tables.](images/queries/q-customername-ordercodes-fields.png){#fig-q-customername-ordercodes-fields}

7.  Click [Next]{.uicontrol}, choose [Detail (shows every field of every record)]{.uicontrol}, then click [Next]{.uicontrol}.

8.  Name the query [Customername+Ordercodes]{.varname}, select [Modify the query design]{.uicontrol}, and click [Finish]{.uicontrol}.

9.  Sort the [LastName]{.uicontrol} field in [Ascending]{.uicontrol} order.

![Query Design View for CustomerName+OrderCodes query.](images/queries/q-customername-ordercodes-design.png){#fig-q-customername-ordercodes-design-1}

10. Switch to [Datasheet View]{.uicontrol} to review the result.

![Datasheet View of the CustomerName+OrderCodes query results.](images/queries/q-customername-ordercodes-result.png){#fig-q-customername-ordercodes-result}

12. Close the query and save the changes.
:::

## Criteria in Queries {#sec-queries-criteria}

This section explains conditions in a query, the Like operator, and wildcards.

In a query, you can define conditions so that only records meeting these conditions are displayed. The Criteria row in the design grid is used for this purpose.

A criterion is similar to a formula. It is a string that can consist of field references, operators, and constants (values that remain the same). Query criteria are also called expressions. The formulation of a criterion depends on the data type of the field (text, numeric, date/time, yes/no).

| Category      | Operators                                         |
|:--------------|:--------------------------------------------------|
| Arithmetic    | `+`, `-`, `*`, `/`, `\`, `^`, `Mod`               |
| Comparison    | `=`, `>`, `>=`, `<`, `<=`, `<>`                   |
| Logical       | `And`, `Or`, `Not`, `Xor`, `Eqv`                  |
| Concatenation | `&`, `+`                                          |
| Special       | `Is Null`, `Is Not Null`, `Like`, `Between`, `In` |

: Operators in criteria {#tbl-criteria-operators}

You can create simple or very complex criteria using these operators.

The `Like` operator plays a special role. It compares a value with a specific pattern. This pattern can be a literal string, such as Like "North", or it can contain wildcards, such as Like "He\*". This makes the Like operator very powerful.

Date values must be enclosed in pound signs `#`. Some examples of date criteria: `#12/5/2010#`, `>#9/1/2010#`, `>#9/1/2010#` and `<#9/15/2010#`

Wildcards are placeholders for other characters, used when you don't know the entire search pattern but only a part of it. The three most common wildcards are:

-   `*`: For any number of characters. Examples: `"A*"`, `"*dam"`

-   `?`: For any single character. Example: `"b?k"`

-   `#`: For any single digit. Example `"1#5"`

[External article: Examples of query criteria](https://support.office.com/en-us/article/Examples-of-query-criteria-3197228c-8684-4552-ac03-aba746fb29d8)

## Orders from Utrecht Customers {#sec-queries-utrecht-dec2009}

This section covers manually adding fields and criteria to an existing query and saving the query under a new name.

To perform this task, you must have completed the steps in @sec-queries-customername-ordercodes.

**GOAL**: Create a list sorted by last name, first name, and order codes for all customers who live in the province of Utrecht and placed an order in December 2009.

**ANALYSIS**: All required information is available in the query created in @sec-queries-customername-ordercodes. However, two additional conditions (criteria) are needed:

-   The [Province]{.varname} field (in the [Customers]{.varname} table) should have the value "UT".
-   The [OrderDate]{.varname} field (in the [Orders]{.varname} table) should have a value between December 1, 2009, and December 31, 2009.

:::: {#prp-queries-utrecht-dec2009}
[File]{.smallcaps}: `{{< var database >}}`

1.  Open the database.

2.  Open the [CustomerName+OrderCodes]{.varname} query in [Design View]{.uicontrol}.

![Query Design View of the CustomerName+OrderCodes query.](images/queries/q-customername-ordercodes-design.png){#fig-q-customername-ordercodes-design-2}

3.  Drag the [Province]{.varname} field from the [Customers]{.varname} table to the column next to [OrderCode]{.varname}. Drag the [OrderDate]{.varname} field from the [Orders]{.varname} table to the next column.

![Query Design Grid with Province and OrderDate fields added.](images/queries/q-utrecht-dec2009-fields.png){#fig-q-utrecht-dec2009-fields}

4.  Enter "UT" in the [Criteria]{.uicontrol} box under the [Province]{.varname} field.

5.  Enter `Like "12*2009"` in the [Criteria]{.uicontrol} box under the [OrderDate]{.varname} field.

![Query Design Grid with criteria for Province and OrderDate.](images/queries/q-utrecht-dec2009-criteria.png){#fig-q-utrecht-dec2009-criteria}

::: callout-note
-   For the date criteria you can use `Like "12*2009"` if you only care about the month and the year. For more precise date ranges you should need `Between #12/1/2009# And #12/31/2009#.`

-   The asterisk \* is a wildcard meaning any characters can be in its place. So, the string "12/\*/2009" would match any day in December 2009.

-   Ensure your computer's date format settings (e.g., American: month-day-year) are consistent with how you enter dates in Access criteria. Access typically interprets dates based on regional settings but using the unambiguous #mm/dd/yyyy# format is best practice.
:::

6.  Switch to [Datasheet View]{.uicontrol} and verify that all customers are from the province of Utrecht and that all order dates are in December 2009.

7.  Switch to [Design View]{.uicontrol} and uncheck the [Show]{.uicontrol} box for the [Province]{.varname} and [OrderDate]{.varname} columns.

8.  Switch to [Datasheet View]{.uicontrol}.

9.  Save the query under a different name using [File \> Save Object As]{.uicontrol} and specify the name [UtrechtOrdersDec2009]{.varname}.

10. click [OK]{.uicontrol} and close the query.
::::

## Customers with Box CHER {#sec-queries-customers-cher}

This section describes creating a select query involving three tables.

**GOAL**: Towards the end of the calendar year, it's noted that the sell-by date for CHER boxes is approaching. The sales department wants to organize a direct mail campaign for customers who have previously purchased CHER boxes. Create a list of all customers (last name, first name, and full address) who have bought at least one CHER box.

**ANALYSIS**: All customer information (first name, last name, address, zip code, city) is in the [Customers]{.varname} table. The ordered boxes can be found in the [BoxCode]{.varname} field in the [OrderDetails]{.varname} table. To link an order to a customer, you also need the [Orders]{.varname} table, which serves as the link between the [Customers]{.varname} and [OrderDetails]{.varname} tables. You'll need to specify the value CHER for the [BoxCode]{.varname} field as a condition.

When using the Wizard to create the query, it is sufficient to add only the necessary fields from the [Customers]{.varname} and [OrderDetails]{.varname} tables. The Wizard will then automatically add the [Orders]{.varname} table because it links the [Customers]{.varname} and [OrderDetails]{.varname} tables. If you create the query manually from scratch, you must remember to add the [Orders]{.varname} table yourself. Therefore, using the Wizard is preferred for this task.

::: callout-note
It's not necessary to include a criterion stating that at least one box was ordered, because this condition is automatically enforced by the joins between linked tables when retrieving related data.
:::

:::: {#prp-queries-customers-cher}
[File]{.smallcaps}: `{{< var database >}}`

1.  Open the database.

2.  Choose [Create tab \> Query Wizard (Queries group)]{.uicontrol}. The New Query dialog box will be displayed, where you can select the query type.

3.  Select [Simple Query Wizard]{.uicontrol} and click [OK]{.uicontrol}.

4.  In the [Tables/Queries]{.uicontrol} list box, select [Table: Customers]{.varname}. The fields of the [Customers]{.varname} table will be displayed in the [Available Fields]{.uicontrol} box (see @fig-q-wizard-t-customers).

5.  Add the following fields: [FirstName]{.varname}, [LastName]{.varname}, [Address]{.varname}, [ZipCode]{.varname}, [City]{.varname}. Select the field, and click ![](images/common/button-add-field.png).

::: callout-tip
You can also double click on a field to add or remove it.
:::

6.  In the [Tables/Queries]{.uicontrol} box, select [Table: OrderDetails]{.varname}. The fields of the [OrderDetails]{.varname} table will be displayed in the [Available Fields]{.uicontrol} box.

7.  Add field [BoxCode]{.varname}.

![Simple Query Wizard: Selected fields for Customers and CHER box query.](images/queries/q-customers-cher-fields.png){#fig-q-customers-cher-fields}

8.  Click [Next]{.uicontrol}. Now you can specify if you want a detail or summary query.

9.  Select [Detail (shows every field of every record)]{.uicontrol} and click [Next]{.uicontrol}.

10. Name the query [CustomersAndCHER]{.varname}, select [Modify the query design]{.uicontrol}, and click [Finish]{.uicontrol}. The query will be saved and then appear in Design View.

![Query Design View for Customers and CHER box query.](images/queries/q-customers-cher-design.png){#fig-q-customers-cher-design}

11. Enter "CHER" in the [Criteria]{.uicontrol} row under the [BoxCode]{.varname} column and uncheck the [Show]{.uicontrol} box for this field.

![Query Design Grid with CHER criterion for BoxCode.](images/queries/q-customers-cher-criteria.png){#fig-q-customers-cher-criteria}

12. Switch to [Datasheet View]{.uicontrol}.

13. Close the query and save the changes.
::::

## Summarizing and Calculations {#sec-queries-summarizing}

Simple select queries work with individual records. When you select certain customers from the [Customers]{.varname} table with a query, you will see a record for each customer that meets the requirements. It is also possible to group your records and then perform calculations on these subgroups, similar to calculating totals and subtotals.

When a query is displayed in Design View, you will see the ![Totals button icon.](images/queries/button-totals.png) on the ribbon under [Query Design tab \> Totals (Show/Hide group)]{.uicontrol}.

With this button, you can show or hide a [Total]{.uicontrol} row in the design grid. Access adds a [Total]{.uicontrol} box for each field, just below the table box.

![Query Design View with the Total row visible.](images/queries/q-pralines-box-design.png){#fig-q-pralines-box-design}

For each added field, you can choose an option from the drop-down list in the [Total]{.uicontrol} row. This option determines whether the field is used in a calculation, for grouping, or for filtering. The available options can be divided into three categories:

Grouping

:   The choice is [Group By]{.uicontrol}. The field is used to create smaller groups on which you can perform calculations. This is also the default option.

Filtering

:   The choice is [Where]{.uicontrol}. The checkmark in the [Show]{.uicontrol} box is also cleared and should remain so. In the [Criteria]{.uicontrol} box, you can specify the value or expression for filtering.

Calculations

:   The options are: `Sum`, `Avg`, `Min`, `Max`, `Count`, `StDev`, `Var`, `First`, `Last`, `Expression`. The selected calculation is then performed for the field.

| Choice in Total box | Description |
|:-------------------------|:---------------------------------------------|
| `Group By` | Groups records based on the values in this field. |
| `Sum` | Adds together the values in this field. |
| `Avg` | Averages the values in this field. |
| `Min` | Retains the smallest value in this field. |
| `Max` | Retains the largest value in this field. |
| `Count` | Counts the number of records (regardless of the field). |
| `StDev` | Calculates the standard deviation of values in this field. |
| `Var` | Calculates the variance of values in this field. |
| `First` | Retains the first value in this field for each group. |
| `Last` | Retains the last value in this field for each group. |
| `Expression` | Calculates a user-defined expression for this field. |
| `Where` | Filters records based on values in this field. |

: Options for Summarizing. {#tbl-grouping-options}

### Calculated Field {.unnumbered}

A calculated field takes data from one or more fields and performs arithmetic operations to produce new information. You can perform simple arithmetic, like addition and multiplication, or use Access's built-in functions, such as `Sum` and `Avg`. You can only use fields that have been added to the query. To create a calculated field:

1.  Click in an empty column in the Field row of the design grid.
2.  Enter a name for the calculation (the result), followed by a colon (`:`).
3.  Enter the expression for the calculation.

::: callout-note
-   You can use field names in the expression. Field names must be enclosed in square brackets (\[\]). If a field name contains no spaces, Access will add the square brackets for you after you enter the name. If a field name contains spaces, you must type the square brackets yourself.

-   When using one of the calculation options for summarizing, it is recommended to also provide a new name in front of the field name (e.g., `AvgCost: PralineCosts)`; otherwise, Access generates a default name for the result in Datasheet View (e.g., `AvgOfPralineCosts`). This new name must also be followed by a colon.
:::

Here are some examples. Study them carefully. Create and experiment with them.

::: {#exm-queries-praline-costs}
**Average Praline Costs per Chocolate Type**

In this example, the [ChocolateType]{.varname} field is used for grouping, creating a group for each chocolate type. The [PralineCosts]{.varname} field is used to calculate the average praline costs for each group. The result is one record for each chocolate type, showing the average price.

![Query Design: Average praline costs per chocolate type.](images/queries/q-pralinecosts-chocolatetype-design.png){#fig-q-pralinecosts-chocolatetype-design}

![Query Result: Average praline costs per chocolate type.](images/queries/q-pralinecosts-chocolatetype-result.png){#fig-q-pralinecosts-chocolatetype-result}

Because the column for the averages was not given a new custom name, Access generated the name [AvgOfPralineCosts]{.varname}.
:::

::: {#exm-queries-price-statistics}
**Box Price Statistics**

In this example, the [BoxPrice]{.varname} field is used four times with different calculations. Each column was given a new name. The result of the query is a single record containing the four calculation results.

![Query Design: Box price statistics.](images/queries/q-boxprice-statistics-design.png){#fig-q-boxprice-statistics-design}

![Query Result: Box price statistics.](images/queries/q-boxprice-statistics-result.png){#fig-q-boxprice-statistics-result}
:::

::: {#exm-queries-box-prices}
**Average Box Price for Boxes Over 200 Grams**

Calculate the average price of boxes weighing more than 200 grams. The [Weight]{.varname} field is used for filtering to include only boxes over 200 grams.

![Query Design: Average box price for boxes over 200g.](images/queries/q-boxprice-200g-design.png){#fig-q-boxprice-200g-design}

![Query Result: Average box price for boxes over 200g.](images/queries/q-boxprice-200g-result.png){#fig-q-boxprice-200g-result}
:::

## Customers per Province {#sec-queries-customers-province}

Purpose: Using a select query with grouping and a calculation with the `COUNT` function.

**GOAL**: Create a list showing the number of customers per province.

**ANALYSIS**: All necessary data is in the [Customers]{.varname} table. You will need the [Province]{.varname} field. A customer is uniquely identified by their [CustomerCode]{.varname}, so you need to count the number of CustomerCodes in each province. This requires grouping by [Province]{.varname}.

::: {#prp-queries-customers-province}
[File]{.smallcaps}: `{{< var database >}}`

1.  Open the database.

2.  Go to [Create tab \> Query Design (Queries group)]{.uicontrol}. Access creates a new blank query window and displays the Add Tables pane on the right side.

![Add Tables pane in Query Design View.](images/queries/q-show-table.png){#fig-q-show-table}

3.  Select the [Customers]{.varname} table, then click [Add Selected Tables]{.uicontrol}. The [Customers]{.varname} table has now been added to the query window.

4.  Successively add the [Province]{.varname} and [CustomerCode]{.varname} fields to the design grid by double-clicking each field.

![Query Design Grid with Province and CustomerCode fields.](images/queries/q-customers-province-design.png){#fig-q-customers-province-design}

5.  Click [Query Design tab \> Totals (Show/Hide group)]{.uicontrol}.

![Query Design Grid with Total row added.](images/queries/q-customers-province-design-total.png){#fig-q-customers-province-design-total}

6.  In the [Total]{.uicontrol} row under the [CustomerCode]{.varname} column, click and select `Count` from the dropdown list.

![Query Design Grid: Count of CustomerCode grouped by Province.](images/queries/q-customers-province-design-count.png){#fig-q-customers-province-design-count}

7.  Switch to [Datasheet View]{.uicontrol}.

![Query Result: Number of customers per province.](images/queries/q-customers-province-result.png){#fig-q-customers-province-result}

8.  Close the query and answer [Yes]{.uicontrol} when prompted to save changes. The Save As dialog box will be displayed.

9.  Name the query [Number of customers per province]{.varname} and click [OK]{.uicontrol}.
:::

## Column Heading Modification {#sec-queries-column-heading}

This section explains how to change column headings in a query.

To perform this task, you must have completed @sec-queries-customers-province.

By default, Access uses field names as column headings in Datasheet View. For summarized data, Access generates a name (e.g., CountOfCustomerCode). It is recommended to use clearer, more descriptive names.

::: {#prp-queries-column-heading}
[File]{.smallcaps}: `{{< var database >}}`

1.  Open the database.

2.  Open the [Number of customers per province]{.varname} query in [Design View]{.uicontrol}.

3.  Place the cursor in the Field row for the [CustomerCode]{.varname} field, at the beginning of the field name, and type"Total customers: ". (Ensure there's a space after the colon if desired in the heading).

![Query Design Grid: Modifying the column heading for counted CustomerCode.](images/queries/q-customers-province-columnhead-design.png){#fig-q-customers-province-columnhead-design}

4.  Switch to [Datasheet View]{.uicontrol}.

![Query Result: Number of customers per province with modified column heading.](images/queries/q-customers-province-columnhead-result.png){#fig-q-customers-province-columnhead-result}

5.  Close the query and save the changes.
:::

## Calculate Order Amounts {#sec-queries-ordercalculation}

**GOAL**: Create a sorted list of order line items, showing for each order: order code, box code, number of boxes, box price, and the amount for each line item (i.e., for each type of box).

**ANALYSIS**: For each order, you can find the [OrderCode]{.varname}, [BoxCode]{.varname}, and the number of boxes ([Quantity]{.varname}) in the [OrderDetails]{.varname} table. The [BoxPrice]{.varname} is in the [Boxes]{.varname} table. The line item amount is not present in any table because this amount can be calculated from other data: `Amount = Quantity * BoxPrice`.

:::: {#prp-queries-ordercalculation}
[File]{.smallcaps}: `{{< var database >}}`

1.  Open the database.

2.  Go to [Create tab \> Query Design (Queries group)]{.uicontrol}. Access creates a new blank query window and displays the Add Tables pane (see @fig-q-show-table if necessary).

3.  Add the [OrderDetails]{.varname} and [Boxes]{.varname} tables to the query window.

4.  Add the fields [OrderCode]{.varname}, [BoxCode]{.varname}, [Quantity]{.varname} (from the [OrderDetails]{.varname} table), and [BoxPrice]{.varname} (from the [Boxes]{.varname} table) to the grid by double-clicking each field.

![Query Design: Tables and fields for calculating order row amounts.](images/queries/q-orderrow-amount-design1.png){#fig-q-orderrow-amount-design1}

5.  Set the sort order for the [OrderCode]{.varname} and [BoxCode]{.varname} fields to [Ascending]{.uicontrol}. Click in the Field row of the first empty column and enter "Amount: Quantity\*BoxPrice". Access will automatically surround the field names with square brackets if they don't contain spaces; otherwise, you must type them.

![Query Design: Calculated field for Amount (Quantity\*BoxPrice).](images/queries/q-orderrow-amount-design2.png){#fig-q-orderrow-amount-design2}

6.  Switch to[Datasheet View]{.uicontrol}.

![Query Result: Order row amounts, unformatted.](images/queries/q-orderrow-amount-result-unformatted.png){#fig-q-orderrow-amount-result-unformatted}

7.  Switch to [Design View]{.uicontrol}.

::: callout-note
All objects in Access have properties. These properties determine, among other things, the appearance of the object. You can set properties in the [Property Sheet]{.uicontrol}. You can toggle the visibility of the Property Sheet with [Query Design tab \> Property Sheet (Show/Hide group)]{.uicontrol}. A faster way is to use the keyboard shortcut [F4]{.uicontrol}.

To format the amounts as currency, you need to change the [Format]{.uicontrol} property of the calculated [Amount]{.varname} field.
:::

8.  Ensure the [Property Sheet]{.uicontrol} is visible. Click anywhere in the [Amount]{.varname} field in the design grid. In the Property Sheet, click in the [Format]{.uicontrol} box and choose [Currency]{.uicontrol} from the list box.

![Field Properties: Setting Format to Currency for the Amount field.](images/queries/field-format-currency.png){#fig-field-format-currency}

9.  Switch to [Datasheet View]{.uicontrol}.

![Query Result: Order row amounts, formatted as currency.](images/queries/q-orderrow-amount-result-formatted.png){#fig-q-orderrow-amount-result-formatted}

10. Close the query and save the changes.

11. Name the query [OrderRowAmount]{.varname} and click [OK]{.uicontrol}.
::::

## First Order per Customer {#sec-queries-first-order-dates}

**GOAL**: Create a list of the first order for each customer. Show the customer code, customer name (last and first), and the date of their first order for every customer who has placed one or more orders.

**ANALYSIS**: The required data is in the [Customers]{.varname} and [Orders]{.varname} tables. You need to create a query showing customer data and order data. Finding the first order can be achieved by by using `Min` in the Total row for the [OrderDate]{.varname} field, grouped by customer.

::: {#prp-queries-first-order-dates}
[File]{.smallcaps}: `{{< var database >}}`

1.  Open the database.

2.  Go to [Create tab \> Query Design (Queries group)]{.uicontrol}.

3.  Add the [Customers]{.varname} and [Orders]{.varname} tables to the query window.

4.  Add the fields [CustomerCode]{.varname}, [LastName]{.varname}, and [FirstName]{.varname} (from [Customers]{.varname}), and [OrderDate]{.varname} (from [Orders]{.varname}) to the grid by double-clicking each field.

5.  Click [Query Design tab \> Totals (Show/Hide group)]{.uicontrol}.

6.  Change the column title for [OrderDate]{.varname} by typing "First order date:"in front of the field name in the Field row.

![Query Design: Tables and fields for finding the first order date.](images/queries/q-first-order-dates-design1.png){#fig-q-first-order-dates-design1}

7.  In the [Total]{.uicontrol} row under the [OrderDate]{.varname} (or [FirstOrderDate: OrderDate]{.varname}) column, click and select `Min` from the list. Ensure the [Total]{.uicontrol} row for [CustomerCode]{.varname}, [LastName]{.varname}, and [FirstName]{.varname} is set to `Group By`.

8.  Set the sort order for [LastName]{.varname} and [FirstName]{.varname} to [Ascending]{.uicontrol}.

![Query Design: Finding the minimum (first) order date per customer.](images/queries/q-first-order-dates-design2.png){#fig-q-first-order-dates-design2}

9.  Switch to [Datasheet View]{.uicontrol}.

![Query Result: First order date for each customer.](images/queries/q-first-order-dates-result.png){#fig-q-first-order-dates-result}

10. Close the query and save the changes.

11. Name the query [First order dates]{.varname} and click [OK]{.uicontrol}.
:::

## Parameter Query {#sec-queries-parameters}

A parameter query displays a dialog box that prompts the user for additional information when it runs, such as criteria for retrieving records or a value to insert into a field. You can design the query to request multiple pieces of data, for example, a start and end date, to retrieve all records with dates between them.

Parameter queries are also useful as a basis for forms and reports. For example, based on a parameter query, you can create a monthly revenue report. When printing the report, a dialog box will prompt you for the month you want to print; you enter the month, and the correct report will be printed.

**GOAL**: At Snoopy, customer service representatives regularly receive phone inquiries about specific orders. You want to be able to quickly retrieve and display the data for a particular order. This can be achieved with a parameter query that asks for the order code when the query is run.

**ANALYSIS**: The necessary information about a particular order is in the [Orders]{.varname} and [OrderDetails]{.varname} tables. Prompting for the order code can be controlled via a criterion.

::: {#prp-queries-parameter}
[File]{.smallcaps}: `{{< var database >}}`

1.  Open the database.

2.  Go to [Create tab \> Query Design (Queries group)]{.uicontrol}.

3.  Add the [Orders]{.varname} and [OrderDetails]{.varname} tables to the query window.

4.  Add the fields [OrderCode]{.varname}, [CustomerCode]{.varname}, [OrderDate]{.varname} (from [Orders]{.varname}), and [BoxCode]{.varname} and [Quantity]{.varname} (from [OrderDetails]{.varname}) to the grid by double-clicking each field.

![Query Design: Tables and fields for the order information parameter query.](images/queries/q-information-order-design1.png){#fig-q-information-order-design1}

5.  In the [Criteria]{.uicontrol} row under the [OrderCode]{.varname} column, type `[Enter order code]`. The square brackets indicate to Access that this is a parameter.

![Query Design: Adding a parameter criterion for OrderCode.](images/queries/q-information-order-design2.png){#fig-q-information-order-design2}

6.  Switch to [Datasheet View]{.uicontrol}. The Enter Parameter Value dialog box will appear, prompting you to enter the order code.

7.  Enter a value, e.g. 30, and click [OK]{.uicontrol}.

![Query Result: Information for order with OrderCode 30 (parameter entry).](images/queries/q-information-order-result.png){#fig-q-information-order-result}

8.  Close the query and save the changes.

9.  Name the query [Information specific order]{.varname} and click [OK]{.uicontrol}.
:::

## Action Queries {#sec-queries-actions}

Most queries are select queries, used to search, collect, and display data, but not to change it. However, Access also has another category of queries, known as action queries, with which you can change data by deleting, updating, or adding records. The main advantage of an action query is that it can change a large number of records without requiring programming knowledge. The way you create and work with these queries is similar: first, create a select query, and then change the query type.

Access has four types of action queries:

Make Table

:   Selects one or more records and then creates a new table for them. This new table can be placed in the current database or created as a new table in a different database. You can use a Make Table query, for example, to copy outdated data to an archive database.

Append

:   Selects one or more records and then adds them to another existing table. For example, suppose you acquire new customers whose information has been stored in a separate table. With an append query, you can move these records to your main customers table.

Delete

:   Deletes one or more records. You specify a set of filter conditions, and then Access deletes the matching records. For example, you can remove products that are discontinued.

Update

:   Changes values in one or more records. Existing values in a field are replaced by new values, similar to a search and replace operation. You cannot undo the changes made by an update query, so it is advisable to first back up the database or the specific table before running the update query.

::: callout-important
Because these queries change data in the database, these queries could be a security risk. To provide protection, a number of checks are carried out in Access and the Trust Center. The trust center can disable the content. When opening such a database, Access displays a message with a security warning.

![Access Message Bar showing a security warning.](images/common/security-warning.png){#fig-securitywarning}

If you want to enable the content, click [Enable Content \> Options]{.uicontrol} and choose the desired option in the dialog box that appears. The database is opened again with full functionality.

It is also advisable to make a backup of the tables that are changed. That 's easy to do with copy and paste.
:::

::: {#exm-queries-copy-table}
**Creating a Copy of a Table**

1.  In the Navigation Pane, right-click the name of the table and select [Copy]{.uicontrol} from the shortcut menu.
2.  Right-click again in a blank area of the Navigation Pane and choose [Paste]{.uicontrol}. Give the new table a different name when prompted (e.g., TableName_Backup).

To recover a table after an unintended change using a backup copy:

1.  Delete or rename the changed table. For instance, in the Navigation Pane, right-click the name of the changed table and select [Delete]{.uicontrol} or [Rename]{.uicontrol}.
2.  Right-click the backup copy of the table and choose [Rename]{.uicontrol}. Give the table its original name.
:::

### Update Query {#sec-queries-action-update}

This section provides an example of a simple update query that changes values in a field for all records satisfying a certain condition.

**GOAL**: The costs of all pralines with chocolate type "White" should be increased by 10%.

**ANALYSIS**: All necessary data is in the [Pralines]{.varname} table. You need the [ChocolateType]{.varname} and [PralineCosts]{.varname} fields. Selecting the white chocolate types can be done by adding a criterion to the query. You can increase the [PralineCosts]{.varname} by 10% by multiplying the current value by `1.1`.

::: callout-important
Make a backup (copy) of the table, so you can restore the original situation. Another possibility is to backup (copy) the whole database.
:::

:::: {#prp-queries-action-update}
[File]{.smallcaps}: `{{< var database >}}`

1.  Open the database.

2.  Go to [Create tab \> Query Design (Queries group)]{.uicontrol}.

3.  Add the [Pralines]{.varname} table to the query window.

4.  Add the [ChocolateType]{.varname} and [PralineCosts]{.varname} fields to the grid by double-clicking each field.

5.  Change the query type by clicking [Update]{.uicontrol} in the [Query Type]{.uicontrol} group on the [Query Design]{.uicontrol} tab. The [Sort]{.uicontrol} and [Show]{.uicontrol} rows will disappear, and a new row, [Update To]{.uicontrol}, will appear.

![Update Query Design: Initial fields before specifying update logic.](images/queries/q-increase-costs-design1.png){#fig-q-increase-costs-design1}

6.  In the [Criteria]{.uicontrol} box under the [ChocolateType]{.varname} column, enter "White".

7.  In the [Update To]{.uicontrol} box under the [PralineCosts]{.varname} column, type "\[PralineCosts\]\*1.1".

![Update Query Design: Logic to increase PralineCosts by 10% for White chocolate.](images/queries/q-increase-costs-design2.png){#fig-q-increase-costs-design2}

::: callout-note
-   Access will surround text criteria like "White" with double quotes if you don't type them.
-   Field names in expressions must be enclosed in square brackets (\[\]).
:::

8.  Save the query by clicking the [Save]{.uicontrol} button () on the [Quick Access Toolbar]{.uicontrol} and name it "Increase costs white chocolates with 10%".

9.  Click [Run]{.uicontrol} in the [Results]{.uicontrol} group on the [Query Design]{.uicontrol} tab. A dialog box will appear asking for confirmation and stating how many rows will be updated.

10. Click [Yes]{.uicontrol} to proceed with the update.

11. Close the query.
::::

### Make Table Query {#sec-queries-action-maketable}

Purpose: Creating a new table using a Make-Table query.

**GOAL**: The marketing department has a special offer for all customers in Friesland. For this, they need a table containing only the customer data for customers in the province of Friesland.

**ANALYSIS**: All necessary data is in the [Customers]{.varname} table. Selecting customers from Friesland can be done with a criterion in the query. First, you need to create this select query and then change its type to [Make Table]{.uicontrol}.

:::: {#prp-queries-action-maketable}
[File]{.smallcaps}: `{{< var database >}}`

**Create select query**

1.  Open the database.

2.  Go to [Create tab \> Query Design (Queries group)]{.uicontrol}.

3.  Add the [Customers]{.varname} table to the query window.

4.  Add all fields by double-clicking the asterisk (\*) at the top of the [Customers]{.varname} field list in the table object. Then, separately add the [Province]{.varname} field again (this allows you to set criteria on it without affecting the display of all other fields from the asterisk).

5.  Enter "FR" as the criterion for the separately added [Province]{.varname} field and uncheck its [Show]{.uicontrol} box (because this field's data will already be shown via the Customers.\* selection).

![Make-Table Query Design: Selecting Friesland customers.](images/queries/q-customers-friesland-design.png){#fig-q-customers-friesland-design}

6.  Check the output of the query by switching to [Datasheet View]{.uicontrol}.

7.  Save the query with the name [Customers Friesland]{.varname}.

**Change the query type**

8.  Open the [Customers Friesland]{.varname} query in [Design View]{.uicontrol}.

9.  Click [Make Table]{.uicontrol} in the [Query Type]{.uicontrol} group on the [Query Design]{.uicontrol} tab. The Make Table dialog box will open.

10. Name the new table [Friesland customers]{.varname} and ensure the option [Current Database]{.uicontrol} is selected for where the table should be created.

![Make Table dialog box: Specifying name and location for the new table.](images/queries/q-maketable-dialogbox.png){#fig-q-maketable-dialogbox}

11. click [OK]{.uicontrol}.

12. Click [Run]{.uicontrol} in the [Results]{.uicontrol} group on the [Query Design]{.uicontrol} tab. A dialog box will appear asking for confirmation and stating how many rows will be copied.

13. click [Yes]{.uicontrol}. The new table will be created.

14. Close the query. A dialog box will ask whether the changes to the query design (i.e., changing its type to a make-table query) should be saved.

15. click [Yes]{.uicontrol}.

::: callout-note
This prompt appears because the query type has been changed. This change is also reflected by the query's icon in the Navigation Pane under [Queries]{.uicontrol}.

The query icon in front of the query name, ![](images/queries/q-maketable-icon.png), indicates it's an action query:
:::
::::

## Crosstab Query {#sec-queries-crosstab}

A crosstab query calculates a sum, average, or other aggregate function, and then groups the results by two sets of values: one down the left side of the datasheet (row headings) and another across the top (column headings). A crosstab query is similar in structure to an Excel PivotTable report and is often easier to read than a regular select query displaying the same data because the overview is more compact due to its horizontal and vertical alignment.

When you create a crosstab query, you specify which fields contain row headings, which field contains column headings, and which field contains values to summarize. You can use multiple fields for row headings (up to three), but only one field for column headings and one field for the values to summarize. It's also possible to use an expression for the row heading(s), column heading(s), and the values to summarize.

The easiest and fastest way to create a crosstab query is by using the [Crosstab Query Wizard]{.uicontrol}. For more complex queries, you can often start with this Wizard and then fine-tune the query in Design View.

**GOAL**: Calculate the number of customers by province and by region, and show the result in a crosstab table.

**ANALYSIS**: All necessary data can be found in the [Customers]{.varname} table.

::: {#prp-queries-crosstab}
[File]{.smallcaps}: `{{< var database >}}`

1.  Open the database.

2.  Choose [Create tab \> Query Wizard (Queries group)]{.uicontrol}. Select [Crosstab Query Wizard]{.uicontrol} and click [OK]{.uicontrol}. In the screen that appears, select the table or query that contains the fields for the crosstab.

3.  Select [Table: Customers]{.varname} and click [Next]{.uicontrol}. Now, select the field(s) for the row headings.

4.  Select the [Province]{.varname} field and move it to the [Selected Fields]{.uicontrol} list to be used as a row heading.

![Crosstab Query Wizard: Selecting Province for row headings.](images/queries/q-crosstab-rowhead.png){#fig-q-crosstab-rowhead}

5.  click [Next]{.uicontrol}. Now, select the field for the column headings.

6.  Select the [Region]{.varname} field.

![Crosstab Query Wizard: Selecting Region for column headings.](images/queries/q-crosstab-columnhead.png){#fig-q-crosstab-columnhead}

7.  Click [Next]{.uicontrol}. Now, select the field whose values you want to aggregate and the aggregate function.

8.  For the field to calculate, select [CustomerCode]{.varname}. For the function, select `Count`. Deselect the option [Yes, include row sums]{.uicontrol} if you don't want totals for each province.

![Crosstab Query Wizard: Selecting CustomerCode and Count function for summarized values.](images/queries/q-crosstab-values.png){#fig-q-crosstab-values}

9.  click [Next]{.uicontrol}.

10. Name the query [Number of customers by province by region]{.varname}. Select [View the query]{.uicontrol}, and click [Finish]{.uicontrol}.

![Crosstab Query Result: Number of customers by province and region.](images/queries/q-crosstab-result.png){#fig-q-crosstab-result}
:::

## Exercises {#sec-queries-exercises}

:::: {#exr-quer001}
**Customers from Friesland and Groningen (quer001)**

Create a query to select customers in the provinces of Friesland (FR) and Groningen (GR). Show LastName, FirstName, and City. Name the query [quer001]{.varname}.

::: {.content-visible when-format="html:js"}
`r hide("Tip")`

The [Province]{.varname} field can have two values here: FR or GR. You can achieve this by entering one value in the [Criteria]{.uicontrol} row and the other value in the [or]{.uicontrol} row below it. Alternatively, use an expression with the Or operator in the [Criteria]{.uicontrol} row, like "FR" Or "GR".

`r unhide()`

`r hide("Answer")`

Result: 40 customers

`r unhide()`
:::
::::

:::: {#exr-quer002}
**Direct Mail Campaign for MARZ Box (quer002)**

Suppose it is the end of December 2010. The expiration date of the MARZ box is approaching, and there is still plenty in stock. You want to start a direct mail campaign targeting customers who ordered at least one MARZ box between August and November 2010 (inclusive). Show the name and address of these customers. Name the query [quer002]{.varname}.

::: {.content-visible when-format="html:js"}
`r hide("Answer")`

Result: 4 customers

`r unhide()`
:::
::::

:::: {#exr-quer003}
**Praline Boxes with Low Price (quer003)**

Create a list of boxes whose price is \$17.50 or less. Show the fields BoxCode, BoxName, and BoxPrice. Name the query [quer003]{.varname}.

::: {.content-visible when-format="html:js"}
`r hide("Answer")`

Result: 4 boxes

`r unhide()`
:::
::::

:::: {#exr-quer004}
**Milk and Dark Pralines with Low Cost (quer004)**

Create a list of pralines with chocolate type "Milk" or "Dark" (Pure) and whose costs are 30 cents or less. Show the fields PralineCode, PralineName, ChocolateType, and PralineCosts. Name the query [quer004]{.varname}.

::: {.content-visible when-format="html:js"}
`r hide("Answer")`

Result: 18 pralines

`r unhide()`
:::
::::

:::: {#exr-quer005}
**Customers from Enschede, Hengelo or Almelo (quer005)**

Create a list of all customers (name and address) who live in Enschede, Hengelo, or Almelo. Name the query [quer005]{.varname}.

::: {.content-visible when-format="html:js"}
`r hide("Answer")`

Result: 12 customers

`r unhide()`
:::
::::

:::: {#exr-quer006}
**Customers from Amsterdam with Zip Code `20*` (quer006)**

Create a list of customers from Amsterdam (name and address) whose zip code begins with 20. Name the query [quer006]{.varname}.

::: {.content-visible when-format="html:js"}
`r hide("Answer")`

Result: 3 customers

`r unhide()`
:::
::::

:::: {#exr-quer007}
**Pralines Without Filling (quer007)**

Create a list of all pralines without filling. Name the query [quer007]{.varname}.

::: {.content-visible when-format="html:js"}
`r hide("Tip")`

First, determine what value the [FillingType]{.varname} field (or equivalent) has for pralines without filling (e.g., it might be Null or an empty string).

`r unhide()`

`r hide("Answer")`

Result: 12 pralines.

`r unhide()`
:::
::::

:::: {#exr-quer008}
**Customers Outside Amsterdam (quer008)**

Create a list of all customers who do not live in Amsterdam. Name the query [quer008]{.varname}.

::: {.content-visible when-format="html:js"}
`r hide("Tip")`

Find out which operator to use for "not equal to" (usually <>).

`r unhide()`

`r hide("Answer")`

Result: 293 customers

`r unhide()`
:::
::::

:::: {#exr-quer009}
**Number of Pralines per Box (quer009)**

Create a list of all box names with their total number of individual pralines per box. The column showing the number of pralines should have an appropriate title. The list should be sorted in ascending order by box name. Name the query [quer009]{.varname}. (Hint: This usually involves summing the Quantity field from BoxDetails for each box).

::: {.content-visible when-format="html:js"}
`r hide("Answer")`

![Query Result: Number of pralines per box.](images/queries/quer009-result.png)

`r unhide()`
:::
::::

:::: {#exr-quer010}
**Number of praline types per box (quer010)**

Create a list of box names and their number of praline types per box. The column showing the number of pralines should have an appropriate title. The list should be sorted in ascending order of box name. Name the query [quer010]{.varname}.

::: {.content-visible when-format="html:js"}
`r hide("Answer")`

![Number of praline types per box.](images/queries/quer010-result.png)

`r unhide()`
:::
::::

:::: {#exr-quer011}
**Number of Orders per Region(quer011)**

Create a list showing the number of orders per region. The column with the numbers should have an appropriate title. Name the query [quer011]{.varname}.

::: {.content-visible when-format="html:js"}
`r hide("Answer")`

![Query Result: Number of orders per region.](images/queries/quer011-result.png)

`r unhide()`
:::
::::

:::: {#exr-quer012}
**Total Sales per Customer (quer012)**

Create a list with the total sales amount per customer. Show customer code, customer name, and the total sales. The sales column should have an appropriate title and currency formatting. Sort by sales in descending order. Name the query [quer012]{.varname}.

::: {.content-visible when-format="html:js"}
`r hide("Answer")`

![Query Result: Total sales per customer.](images/queries/quer012-result.png)

`r unhide()`
:::
::::

:::: {#exr-quer013}
**Customers with Orders (quer013)**

Create a list of customers (code and name) who have placed at least one order. Name the query [quer013]{.varname}.

::: {.content-visible when-format="html:js"}
`r hide("Answer")`

Result: 264 customers

`r unhide()`
:::
::::

:::: {#exr-quer014}
**Customers with Last Name Jansen or Janssen in North Region (quer014)**

Create a list of customers with the last name Jansen or Janssen who are in the "North" region. Show relevant details. Name the query [quer014]{.varname}.

::: {.content-visible when-format="html:js"}
`r hide("Answer")`

![Query Result: Customers named Jansen or Janssen in the North region.](images/queries/quer014-result.png)

`r unhide()`
:::
::::

:::: {#exr-quer015}
**Pralines with Filling and Without Nuts (quer015)**

Create a list of pralines that have a filling but do not contain nuts. Show relevant praline details. Name the query [quer015]{.varname}.

::: {.content-visible when-format="html:js"}
`r hide("Answer")`

Result: 22 pralines

![Query Result: Pralines with filling and no nuts.](images/queries/quer015-result.png)

`r unhide()`
:::
::::

:::: {#exr-quer016}
**Boxes Heavier than 150 Grams with Max Price \$35 (quer016)**

Create a list of boxes that are heavier than 150 grams and have a maximum price of $35. Show only BoxCode, BoxName, and BoxPrice. Sort the boxes by price in ascending order. Name the query [quer016]{.varname}.

::: {.content-visible when-format="html:js"}
`r hide("Answer")`

![Query Result: Boxes over 150g, max price \$35.](images/queries/quer016-result.png)

`r unhide()`
:::
::::

:::: {#exr-quer017}
**Boxes Priced \$17-\$25 with Stock of at least 400 (quer017)**

Create a list of boxes with a price between \$17 and \$25 (inclusive) and of which there are at least 400 in stock. Show the code, name, price, and stock of these boxes. Name the query [quer017]{.varname}.

::: {.content-visible when-format="html:js"}
`r hide("Answer")`

![Query Result: Boxes priced \$17-\$25, stock \>= 400.](images/queries/quer017-result.png)

`r unhide()`
:::
::::

:::: {#exr-quer018}
**Total Sales per Province (quer018)**

Create a list of total sales per province. The sales column should have an appropriate title and currency formatting. Sort by sales in descending order. Name the query [quer018]{.varname}.

::: {.content-visible when-format="html:js"}
`r hide("Answer")`

![Query Result: Total sales per province.](images/queries/quer018-result.png)

`r unhide()`
:::
::::

:::: {#exr-quer019}
**Customers with Orders the Week Before Christmas (quer019)**

Create a list of customers who placed an order in the last week before Christmas 2010 (December 20, 2010, through December 24, 2010). Show the code, name, and address of these customers. Each customer should appear only once in the overview, even if they placed multiple orders during this period. Name the query [quer019]{.varname}.

::: {.content-visible when-format="html:js"}
`r hide("Tip")`

The same customer might appear on the list multiple times if they made several orders. To avoid this, set the query property "Unique Values" to "Yes" in the query's Property Sheet.

`r unhide()`

`r hide("Answer")`

![Query Result: Customers with orders in the week before Christmas 2010.](images/queries/quer019-result.png)

`r unhide()`
:::
::::

:::: {#exr-quer020}
**Boxes with Low Sales (quer020)**

Create a list of boxes with low sales, defined as less than \$2000 in total sales. Show the box code and its total sales. Sort by sales in ascending order. The sales column should have an appropriate title and currency formatting. Name the query [quer020]{.varname}.

::: {.content-visible when-format="html:js"}
`r hide("Answer")`

![Query Result: Boxes with sales less than \$2000.](images/queries/quer020-result.png)

`r unhide()`
:::
::::

:::: {#exr-quer021}
**Customers with Zip Code Starting 22 and Total Sales less than \$50 (quer021)**

Create a list of customers whose zip code starts with 22 and who have total sales of \$50 or less. Show relevant customer and sales information. Name the query [quer021]{.varname}.

::: {.content-visible when-format="html:js"}
`r hide("Answer")`

![Query Result: Customers with zip code starting 22 and sales \<= \$50.](images/queries/quer021-result.png)

`r unhide()`
:::
::::

:::: {#exr-quer023}
**Customers for "Sweet and Bitter" Box in 2009 (quer023)**

Create an alphabetical list of customers who bought at least one "Sweet and Bitter" box in 2009. Ensure there are no duplicate customer records in the result. Name the query [quer023]{.varname}.

::: {.content-visible when-format="html:js"}
`r hide("Tip")`

The same customer might appear on the list multiple times if they made several orders. To avoid this, set the query property "Unique Values" to "Yes."

`r unhide()`

`r hide("Answer")`

Result: 96 customers

![Query Result: Customers who bought "Sweet and Bitter" in 2009.](images/queries/quer023-result.png)

`r unhide()`
:::
::::

:::: {#exr-quer024}
**Cities with at Least 2 Customers (quer024)**

Create an alphabetical list of cities that have at least 2 customers. Name the query [quer024]{.varname}.

::: {.content-visible when-format="html:js"}
`r hide("Answer")`

![Query Result: Cities with at least 2 customers.](images/queries/quer024-result.png)

`r unhide()`
:::
::::

::: {#exr-quer025}
**Parameter Query for Praline Chocolate Type (quer025)**

There are several chocolate types for pralines: Butterscotch, Milk, Dark, Toffee, and White. Create a parameter query that prompts the user to enter a chocolate type when the query runs, and then displays the pralines of that type. Show ChocolateType, PralineName, PralineCosts, and PralineDescription. Name the query [quer025]{.varname}.
:::

:::: {#exr-quer026}
**Update Query for Price Reduction (quer026)**

Due to a decline in the world market price of chocolate, the prices of all boxes can be reduced by 15%.

1.  Start by making a backup copy of the entire database or at least the [Boxes]{.varname} table.
2.  Design an update query to implement this reduction. Name the query [quer026]{.varname} and run it.
3.  After verifying the result, you would typically keep this change. For exercise purposes, restore the original situation from your backup.

::: {.callout-warning)
-   Making a backup is crucial because you cannot easily undo the execution of an update query.
-   Be aware that every time you run this query, the prices will be reduced by an additional 15% from their current values.
:::
::::

:::: {#exr-quer027}
**Crosstab Boxes per Weight (quer027)**

Create a crosstab query with box names as row headings, the weight of the boxes as column headings, and the stock quantity as the summarized value in the table. Name the query [quer027]{.varname}.


::: {.content-visible when-format="html:js"}
`r hide("Answer")`

![Crosstab Query Result: Stock of boxes by name and weight.](images/queries/quer027-result.png)

`r unhide()`
:::
::::

:::: {#exr-quer028}
**pdate Query for Price Increase (quer028)**

Due to an increase in the chocolate price on the world market, the prices of all boxes must be increased by 10%.

1.  Start by making a backup copy of the table or the entire database.
2.  Design an update query to implement this price increase. Name the query [quer028]{.varname} and execute it.
3.  For exercise purposes, restore the original situation from your backup.

::: {.callout-warning)
-   Making a backup is important because you cannot revert the execution of an update query.
-   Be aware that each time you execute this query, the prices will be further increased by 10%.
:::
::::

:::: {#exr-quer029}
**Crosstab Sales per Customer per Month (quer029)**

Create a crosstab query to provide an overview of total sales per customer per month in 2010. To do this, first create a select query named [SalesPerCustomerPerMonth2010]{.varname} that calculates these monthly sales. Then, use this select query as the source for the crosstab query. Display customers using their customer number and months using month numbers (e.g., 1 for January, 2 for February). Also, display the total sales for each customer in 2010 (row sums). Name the crosstab query [quer029]{.varname}.

::: {.content-visible when-format="html:js"}
`r hide("Answer")`

![Crosstab Query Result: Sales per customer per month in 2010.](images/queries/quer029-result.png)

`r unhide()`
:::
::::
